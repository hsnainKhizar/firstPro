# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => :static
else
  use_frameworks! :linkage => :static
end

pod 'FirebaseCoreInternal', :modular_headers => true
pod 'FirebaseFirestore', :modular_headers => true

# permissions_path = '../node_modules/react-native-permissions/ios'

# pod 'Permission-Notifications', :path => "#{permissions_path}/Notifications.podspec"
# Add other permissions you need, for example:
# pod 'Permission-Camera', :path => "#{permissions_path}/Camera.podspec"
# pod 'Permission-PhotoLibrary', :path => "#{permissions_path}/PhotoLibrary.podspec"


target 'FirstProject' do

  permissions_path = '../node_modules/react-native-permissions/ios'
  # pod 'Permission-Camera', :path => "#{permissions_path}/Camera"
  # pod 'Permission-PhotoLibrary', :path => "#{permissions_path}/PhotoLibrary"
  
  config = use_native_modules!
  # permissions_path = '../node_modules/react-native-permissions/ios'
# pod 'Permission-Camera', :path => "#{permissions_path}/Camera.podspec"
# pod 'Permission-PhotoLibrary', :path => "#{permissions_path}/PhotoLibrary.podspec"
  use_react_native!(
    :path => config[:reactNativePath],
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )
 

  target 'FirstProjectTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )
    installer.pod_targets.each do |pod|
      if pod.name.eql?('RNPermissions') || pod.name.start_with?('Permission-')
        def pod.build_type;
          Pod::BuildType.static_library
        end
      end
    end
  end
end
